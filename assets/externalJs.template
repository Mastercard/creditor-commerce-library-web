/**  Copyright (c) 2022 Mastercard
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 
*/

/** This configuration file template is used to define and override variables and functions for the creditor commerce library
 **/
/* Define the variables */
var creditorPollInterval = 5000; // Creditor poll interval of 5 seconds to poll the creditor server for link and payment notification.
var dspCdnLocation = "https://domain-name/cdn-file-location"; // CDN location to fetch the DSP details
var creditorCustomUniversalLink = null; // This variable holds the reference to the custom parameterised universal-link return to creditor rather than invoke function

/* Override the 
creditorFunctionToRenderDspLogoAndDetails() 
and 
creditorFunctionToHandleInvokeFunctionApi()
and 
creditorFunctionToHandleGetUniversalLinkFunctionApi() 
functions.
*/

$(document).ready(function () {
    /* 
     * 1. The only data that is required to be passed is manifest file hosted url to get the onboarded DSP list and its details to show
     *    the details on creditor side. 
     * 2nd parameter is verification flag, if this flag 'true' then library does the verification for 
	 * secured signed manifest file using third party library using public key. if creditors do not want verification process
	 * then this flag should be passed as 'false' 
     */

    var invokeGetDspDetailsApi = function () {
        zappCreditorCommerceApi.getDspDetails(dspCdnLocation, true).then(function (result) {
            creditorFunctionToRenderDspLogoAndDetails();
        })
            .catch(function (error) {
                console.log(error);
            });
    };
    invokeGetDspDetailsApi();
});

/* 
 *
 *  2.  SUCCESSFUL RESPONSE - Upon receipt of a successful response from the server:
 *      
 *      A.  Library creates a response object dspDetail by populating the following mandatory attributes:
 *      dspUniqueId, dspName, dspLogo, dspApiVersion, dspAppIconHash
 *      NOTE: dspCount is length of list that is created by library with required attributes. 
 *      At creditor side we must use this object to populate the list as per requirements.
 *      Below sample represents list-group for representation of dsp list
 *
 */

creditorFunctionToRenderDspLogoAndDetails = function () {
    for (i = 0; i < zappCreditorCommerceApi.dspCount; i++) {
        $("#creditorBankListContainer").append(`<li class='list-group-item'><img class="cfiLogo" src="${zappCreditorCommerceApi.dspDetail[i].dspLogo}" alt="${zappCreditorCommerceApi.dspDetail[i].dspName}"/>` +
            `<span class="cfiNameLabel"><p class="mb-0">${zappCreditorCommerceApi.dspDetail[i].dspName}</p><span>Bank Account</span></span><a id="${zappCreditorCommerceApi.dspDetail[i].dspUniqueId}" href="#" class="select-link" onclick="submitUserChoice('${zappCreditorCommerceApi.dspDetail[i].dspUniqueId}','${zappCreditorCommerceApi.dspDetail[i].dspName}')">Select</a></li>`);
    }
};

/* 
 *
 *  3.  Library has two methods;
        A. Invoke Universal-link 
 *      
 *      B. Return parameterised universal-link to creditor as a string so that creditor can select their own way to use it.
 *      creditorCustomUniversalLink = true;
 *      
 *      CreatePayment API details or CreateLink API Details can be used based on journey Type 
 */

function creditorFunctionToHandleInvokeFunctionApi(bankId) {
    var dspID = bankId.id;
    var response = '';
    var creditorRequestForPayPostData = {
        // Creditor Request for Payment Post Data 
    };
    CreatePayment() {
        jQuery.ajax({
            url: { APIURL },
            dataType: "json",
            contentType: "application/json; charset=UTF-8",
            type: "put",
            async: false,
            data: JSON.stringify(postData),
            success: function (creditorRequestForPaymentResponseObject) {
                ajaxFlag = true; // flag to indicate that ajax call is completed successfully
                response = {
                    success: true,
                    lifeCycleId: creditorRequestForPaymentResponseObject.paymentRequestLifeCycleId,
                    retrievalExpiryInterval: res.retrievalExpiryTimeInterval,
                    confirmationExpiryInterval: res.confirmationExpiryTimeInterval
                    //other details
                };
            },
            error: function (creditorRequestForPaymentResponseObject) {
                // Creditor specific code to handle error
            }
        });
    }

    CreateLink() {
        jQuery.ajax({
            url: { APIURL },
            dataType: "json",
            contentType: "application/json; charset=UTF-8",
            type: "put",
            async: false,
            data: JSON.stringify(postData),
            success: function (creditorRequestForPaymentResponseObject) {
                ajaxFlag = true; // flag to indicate that ajax call is completed successfully
                response = {
                    success: true,
                    lifeCycleId: creditorRequestForPaymentResponseObject.agreementLifecycleId,
                    retrievalExpiryInterval: res.retrievalExpiryTimeInterval,
                    confirmationExpiryInterval: res.confirmationExpiryTimeInterval
                    //other details
                };
            },
            error: function (creditorRequestForPaymentResponseObject) {
                // Creditor specific code to handle error
            }
        });
    }

    // If the creditorCustomUniversalLink is false then invokeApp function is invoked to launch universal link

    if (creditorCustomUniversalLink == false) {
        //Web Creditor API function to invoke Bank APP
        zappCreditorCommerceApi.invokeApp(dspUniqueId, response.lifeCycleId, businessType, journeyType);  // These parameters are required for opening the bank app
    }
    else {
        var libReturnUrl = zappCreditorCommerceApi.getUniversalLink(dspUniqueId, response.lifeCycleId, businessType, journeyType);
        displayResponse(libReturnUrl);
    }
}

/* 
 *  3.  Creditor can decide to keep this optional way of notify about transaction,
 *      There are various way to fetch transaction status back,
 *      A: Using Notify function call or 
 *      B: Using window.event emitter. Creditor call back URL is function at creditor side can be used to handle to show receipt of transaction
 */

function creditorFunctionToHandleInvokeNotifyApi(lifeCycleId) {

    /*  NOTE: If jQuery.ajax is used for polling the creditor server and the method is GET then Zapp suggests doing the following to prevent caching:
     * 
     *  Step 1: Add the following property to AJAX call:
     *          cache: false
     *  
     *  Step 2: Add a cache busting parameter to the polling URL. This parameter can be any random number (for example, date timestamp) 
     *          appended to the polling URL. For example, if the polling URL is "/responseForPayment.aspx?lifeCycleId=12345678&orderId=12345" then
     *          the URL with a cache busting parameter called time would be:  
     *          "/responseForPayment.aspx?lifeCycleId=12345678&orderId=12345&time="+Date.now()
     *  
     */

    /*  1.  This method polls the creditor server for a response every X seconds.
     *      X is the value for creditorPollInterval.
     *
     *  2.  lifeCycleId must be passed to the creditor server to enable polling the zapp server for a 
     *      Payment notification.
     *
     *  3.  SUCCESSFUL RESPONSE - Upon receipt of a successful response from the creditor server:
     *
     *      A.  abort transaction and display result
     *
     */
    var abort = false;
    data.success = true;
            /*
             *     B.  if not then, Continue further order processing.
             *
             * 5.  B.  ERROR - Upon receipt of an error from the creditor server:
             *      
             * A. Create error object and return error code with messages.
             *
             */
            var abort = true;

    jQuery.ajax({
        url: creditorPollingUrl
    })
        ,success: function(data) {
        }
        ,error: function(data) {
    }
}

/* Place any other error handling logic here. Error codes returned from library handled here with eventType 'zappCreditorCommerceApiError' */
function listener(event) {
    var evData = event.data;
    // event.data contains the Error object with the following information
    //      errorMessage
    //      errorCode

    if (evData.eventType == "zappCreditorCommerceApiError") {
        console.log(evData.data); // Creditor specific code to handle the errors
    }
}
if (window.addEventListener) {
    addEventListener("message", listener, false);
} else {
    attachEvent("onmessage", listener);
}
